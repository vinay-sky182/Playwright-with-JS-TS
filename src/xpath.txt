Xpath:
------

1. absloute xpath:  It starts from the root element (html) and goes down the hierarchy to the target element.

example: /html/body/div[1]/div[2]/form/input[1]

2. relative xpath: It starts from any node in the DOM and uses a more flexible path to locate the element.

example: //input[@id='username']

----------------------------------------------------------------------------------------------------------

Relative xpath:
---------------

1. single attribute:

syntax: //tagname[@attr='value']
example: //input[@id='input-firstname']

--------------------------------------------------------------------------

2. multiple attributes:

syntax: //tagname[@attr1='value' and @attr2='value']
example: //input[@id='input-firstname' and @name='firstname' and @placeholder='First Name']

-------------------------------------------------------------------------------------------

3. without tag:

syntax: //*[@atrr='value']
example: //*[@id='input-firstname']

-------------------------------------------------------------------------------------------

4. text() : The text() function in XPath is used to select the text content of an element. It's especially useful when you want to locate elements based on the visible text they contain.

syntax: //tagname[text()='exact text value']
example: //h1[text()='Register Account'] 

-------------------------------------------------------------------------------------------

5. contains() : The contains() function in XPath is super useful when you're dealing with dynamic content or partial matches. It allows you to locate elements whose attribute values or text contain a specific substring, rather than matching the whole value.

syntax: //tagname[contains(@attribute, 'value')]
example: //input[contains(@placeholder, 'Tele') and @id='input-telephone']

contains() with text():

syntax: //tagname[contains(text(), 'value')]
example: //h1[contains(text(), 'Register')] 

-------------------------------------------------------------------------------------------

6. contains() with text() and contains() with attr:

syntax: //tagname[contains(text(), 'value') and contains(@attribute, 'value')]
example: //a[contains(text(), 'Forgotten') and contains(@href, 'account/forgotten')]

-------------------------------------------------------------------------------------------

7. starts-with(): The starts-with() function in XPath is used to match elements whose attribute values or text begin with a specific substring. It's very handy when dealing with dynamic values that have a consistent prefix.

syntax: //tagname[starts-with(@attribute, 'prefix value')]
example: //input[starts-with(@placeholder, 'First')]

starts-with() with text():

syntax: //tagname[starts-with(text(),'value')]
example: //h1[starts-with(text(), 'Register')]

-------------------------------------------------------------------------------------------

8. ends-with : xpath doesn't support the ends-with()

-------------------------------------------------------------------------------------------

9. parent to child:

a) //parentTag//childTag ----> direct + indirect child elements

example: //aside[@id='column-right']//a[text()='Login']

b) //parentTag/childTag ----> only direct child elements

example: //select[@id='Form_getForm_Country']/option

-------------------------------------------------------------------------------------------

10. child to parent:

a) child to immediate parent:

   -) Using .. to go to the parent 
      syntax: //tagName[@attr='value']/.. 
      example: //input[@id='input-firstname']/..

   -) Using parent:: axis
      syntax: /parent::tagName
      example: //input[@id='input-firstname']/parent::div

b) child to ancestor:  //input[@id='input-email']/ancestor::form 

-------------------------------------------------------------------------------------------

11. following-sibling:

syntax: //tagName[@atrr = 'value']/ following-sibling preceding-sibling::tagName
example: //lable[@for='input-email']/following-sibling::input[@id='input-email']

-------------------------------------------------------------------------------------------

12. preceding-sibling:

syntax: //tagName[@atrr = 'value']/preceding-sibling::tagName
example: //input[@for='input-email']/preceding-sibling::label

-------------------------------------------------------------------------------------------

13. indexing in xpath: In XPath, indexing is used to select a specific element from a list of matching nodes. It's especially useful when multiple elements match your XPath expression and you want to target one of them based on its position.

syntax: (//tagname)[index]

example: (//input[@class='form-control'])[1]

(//input[@class='form-control'])[position()=1]

(//input[@class='form-control'])[last()]

-------------------------------------------------------------------------------------------